title: Двумерные массивы. Организация программ (процедуры и функции).
questions:
  - question: 'Где объявляется двумерный массив?'
    level: 1
    variants:
      - 'a: Array of Array[1..10] of Integer;!!'
      - 'a: Array[0..20] of Array[1..10] of Integer;!!'
      - 'a: Array of Integer;'
      - 'a: Array[0..20] of Array of Integer;!!'
      - 'a: Array[1..20] of Integer;'
      - 'a: Array of Array of Integer;!!'

  - question: 'Отметьте корректные операции обращения к элементам двумерного массива \verb|m|.'
    level: 1
    variants:
      - 'm[1][5]!!'
      - 'm[1]!!'
      - 'm[1],[5]'
      - 'm(1,5)'
      - 'm[1,5]!!'
      - 'm(1)'
      - 'm(1)(5)'

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 2
    variants:
      - 0
      - 1!!
      - 2
      - 3
    code: |
      const
        a = (
          (1, 2, 3),
          (8, 9, 4),
          (7, 6, 5)
        );
      begin
        k := 0;
        for i := Low(a) to High(a) do
          if a[i][k] > a[k][k] then
            k := i;
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 2
    variants:
      - 0
      - 1
      - 2!!
      - 3
    code: |
      const
        a = (
          (1, 2, 3),
          (8, 0, 4),
          (7, 6, 5)
        );
      begin
        k := 0;
        for i := Low(a) to High(a) do
          if a[i][k] > a[k][k] then
            k := i;
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 2
    variants:
      - 0
      - 1!!
      - 2
      - 3
    code: |
      const
        a = (
          (9, 3, 6),
          (2, 5, 8),
          (4, 7, 9)
        );
      begin
        k := High(a);
        for i := Low(a) to High(a) do
          if a[i][k] < a[k][k] then
            k := i;
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 2
    variants:
      - 0!!
      - 1
      - 2
      - 3
    code: |
      const
        a = (
          (1, 3, 6),
          (2, 5, 8),
          (4, 7, 9)
        );
      begin
        k := High(a);
        for i := Low(a) to High(a) do
          if a[i][k] < a[k][k] then
            k := i;
      end.

  - question: 'Функция в Delphi:'
    level: 10
    variants:
      - Не возвращает или возвращает только одно значение как результат
      - Возвращает ровно одно значение как результат!!
      - Возвращает одно или два значения как результат
      - Возвращает неограниченное число результатов
      - Не возвращает результат

  - question: 'Процедура в Delphi:'
    level: 10
    variants:
      - Не возвращает или возвращает только одно значение как результат
      - Возвращает ровно одно значение как результат
      - Возвращает одно или два значения как результат
      - Возвращает неограниченное число результатов
      - Не возвращает результат!!

  - question: 'Что желательно использовать, когда нужно вернуть один результат:'
    level: 10
    variants:
      - Функцию!!
      - Процедуру
      - Подпрограмму
      - Программу

  - question: 'Что желательно использовать, когда не нужно возвращаеть результат:'
    level: 10
    variants:
      - Функцию
      - Процедуру!!
      - Подпрограмму
      - Программу

  - question: 'Что желательно использовать, когда нужно вернуть более одного результата:'
    level: 10
    variants:
      - Функцию!!
      - Процедуру!!
      - Подпрограмму!!
      - Программу

  - question: 'Что означет дополнение аргумента подпрограммы ( формального ) словом \verb|out|:'
    level: 11
    variants:
      - Изменения значения аргумента сохранится в переданной переменной!!
      - Изменения значения аргумента не сохранится в переданной переменной
      - Нельзя в качестве такого аргумента использовать не-переменные!!
      - В качестве такого аргумента можно использовать не-переменные
      - Этот аргумент можно использовать для вычислений внутри подпрограммы

  - question: 'Что означет дополнение аргумента подпрограммы ( формального ) словом \verb|const|:'
    level: 11
    variants:
      - Изменения значения аргумента сохранится в переданной переменной
      - Изменения значения аргумента не сохранится в переданной переменной!!
      - Нельзя в качестве такого аргумента использовать не-переменные
      - В качестве такого аргумента можно использовать не-переменные!!
      - Этот аргумент можно использовать для вычислений внутри подпрограммы!!

  - question: 'Что означет дополнение аргумента подпрограммы ( формального ) словом \verb|var|:'
    level: 11
    variants:
      - Изменения значения аргумента сохранится в переданной переменной!!
      - Изменения значения аргумента не сохранится в переданной переменной
      - Нельзя в качестве такого аргумента использовать не-переменные!!
      - В качестве такого аргумента можно использовать не-переменные
      - Этот аргумент можно использовать для вычислений внутри подпрограммы!!

  - question: 'Отметьте корректные операции работы с функцией \verb|abs(x: Integer): Integer|.'
    level: 12
    variants:
      - 'WriteLn(abs 42)'
      - 'WriteLn(abs(42))!!'
      - 'ReadLn(abs(42))'
      - 'abs(42)!!'
      - 'WriteLn(abs[42])'

  - question: 'Отметьте корректные операции работы с процедурой \verb|abs(var x: Integer)|.'
    level: 12
    variants:
      - 'abs x'
      - 'WriteLn(abs(x))'
      - 'abs[x]'
      - 'abs(x)!!'
      - 'abs(42)'

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 13
    variants:
      - 81
      - 9
      - 27!!
      - 3
    code: |
      function func(x: Integer): Integer;
      begin
        result := x;
        x := x * x;
        result := result * x;
      end;
      begin
        k := 3;
        k := func(k);
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 13
    variants:
      - 81
      - 9!!
      - 27
      - 3
    code: |
      function func(x: Integer): Integer;
      begin
        result := x;
        x := x * x;
        result := result * result;
      end;
      begin
        k := 3;
        k := func(k);
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 13
    variants:
      - 81
      - 9
      - Ошибка в коде!!
      - 3
    code: |
      procedure proc(out x: Integer);
      begin
        x := x * x;
      end;
      begin
        k := 3;
        func(k);
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 13
    variants:
      - 81
      - 9!!
      - Ошибка в коде
      - 3
    code: |
      procedure proc(var x: Integer);
      begin
        x := x * x;
      end;
      begin
        k := 3;
        func(k);
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 13
    variants:
      - 81
      - 9
      - Ошибка в коде
      - 3!!
    code: |
      procedure proc(x: Integer);
      begin
        x := x * x;
      end;
      begin
        k := 3;
        func(k);
      end.

  - question: 'Что будет находиться в переменной \verb|k| в результате выполнения кода?'
    level: 13
    variants:
      - 81
      - 9
      - Ошибка в коде!!
      - 3
    code: |
      procedure proc(const x: Integer);
      begin
        x := x * x;
      end;
      begin
        k := 3;
        func(k);
      end.

  - question: 'Что будет находиться в переменных \verb|a| и \verb|b| в результате выполнения кода?'
    level: 14
    variants:
      - \verb|a=4|, \verb|b=4|
      - \verb|a=3|, \verb|b=3|
      - \verb|a=4|, \verb|b=3|!!
      - \verb|a=3|, \verb|b=4|
    code: |
      function xchg(var x: Integer; y: Integer): Integer;
      begin
        result := x;
        x := y;
      end;
      begin
        a := 3;
        b := 4;
        b := result(a, b);
      end.

  - question: 'Что будет находиться в переменных \verb|a| и \verb|b| в результате выполнения кода?'
    level: 14
    variants:
      - \verb|a=4|, \verb|b=4|
      - \verb|a=3|, \verb|b=3|!!
      - \verb|a=4|, \verb|b=3|
      - \verb|a=3|, \verb|b=4|
    code: |
      function xchg(x: Integer; var y: Integer): Integer;
      begin
        result := x;
        x := y;
      end;
      begin
        a := 3;
        b := 4;
        b := result(a, b);
      end.

  - question: 'Что будет находиться в переменных \verb|a| и \verb|b| в результате выполнения кода?'
    level: 14
    variants:
      - \verb|a=4|, \verb|b=4|!!
      - \verb|a=3|, \verb|b=3|
      - \verb|a=4|, \verb|b=3|
      - \verb|a=3|, \verb|b=4|
    code: |
      function xchg(var x: Integer; var y: Integer): Integer;
      begin
        x := y;
        result := x;
        y := result;
      end;
      begin
        a := 3;
        b := 4;
        b := result(a, b);
      end.

  - question: 'Что будет находиться в переменных \verb|a| и \verb|b| в результате выполнения кода?'
    level: 14
    variants:
      - \verb|a=4|, \verb|b=4|
      - \verb|a=3|, \verb|b=3|
      - \verb|a=4|, \verb|b=3|
      - \verb|a=3|, \verb|b=4|!!
    code: |
      function xchg(x: Integer; var y: Integer): Integer;
      begin
        x := y;
        result := x;
        y := result;
      end;
      begin
        a := 3;
        b := 4;
        b := result(a, b);
      end.

  - question: 'Какими значениями будет заполнен массив \verb|a : Array[0..N] of Integer| в результате выполнения данной программы? Выпишите первые 4 элемента.'
    level: 15
    variants:
      - ''
    code: |
        a[0] := 1;
        for i := 1 to N do
          a[i] := a[i-1]*2 + 10;

  - question: 'Какими значениями будет заполнен массив \verb|a : Array[0..N] of Integer| в результате выполнения данной программы? Выпишите первые 4 элемента.'
    level: 15
    variants:
      - ''
    code: |
        a[0] := 1;
        for i := 1 to N do
          a[i] := -a[i-1] + 1;

  - question: 'Какими значениями будет заполнен массив \verb|a : Array[0..N] of Integer| в результате выполнения данной программы? Выпишите первые 4 элемента.'
    level: 15
    variants:
      - ''
    code: |
        a[0] := 1;
        for i := 1 to N do
          a[i] := i * a[i-1];

  - question: 'Допишите функцию, возвращающую минимальное из трёх переданных чисел.'
    level: 16
    code: |
        function Min(a, b, c: Real): Real;
        begin
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
        end.
        
  - question: 'Допишите функцию, возвращающую максимальное из трёх переданных чисел.'
    level: 16
    code: |
        function Max(a, b, c: Real): Real;
        begin
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
        end.