title: Двумерные массивы. Организация программ (процедуры и функции).
questions:
  - question: 'Где объявляется двумерный массив?'
    level: 1
    variants:
      - 'a: Array of Array[1..10] of Integer;!!'
      - 'a: Array[0..20] of Array[1..10] of Integer;!!'
      - 'a: Array of Integer;'
      - 'a: Array[0..20] of Array of Integer;!!'
      - 'a: Array[1..20] of Integer;'
      - 'a: Array of Array of Integer;!!'

  - question: 'Отметьте корректные операции обращения к элементам двумерного массива \verb|m|.'
    level: 1
    variants:
      - 'm[1][5]!!'
      - 'm[1]!!'
      - 'm[1],[5]'
      - 'm(1,5)'
      - 'm[1,5]!!'
      - 'm(1)'
      - 'm(1)(5)'
      
    - question: 'Функция в Delphi:'
    level: 10
    variants:
      - Не возвращает или возвращает только одно значение как результат
      - Возвращает ровно одно значение как результат!!
      - Возвращает одно или два значения как результат
      - Возвращает неограниченное число результатов
      - Не возвращает результат

    - question: 'Процедура в Delphi:'
    level: 10
    variants:
      - Не возвращает или возвращает только одно значение как результат
      - Возвращает ровно одно значение как результат
      - Возвращает одно или два значения как результат
      - Возвращает неограниченное число результатов
      - Не возвращает результат!!

    - question: 'Что желательно использовать когда нужно вернуть один результат:'
    level: 10
    variants:
      - Функцию!!
      - Процедуру
      - Подпрограмму
      - Программу

    - question: 'Что желательно использовать когда не нужно возвращаеть результат:'
    level: 10
    variants:
      - Функцию
      - Процедуру!!
      - Подпрограмму
      - Программу

    - question: 'Что желательно использовать когда нужно вернуть более одного результата:'
    level: 10
    variants:
      - Функцию!!
      - Процедуру!!
      - Подпрограмму!!
      - Программу

    - question: 'Что означет добавление аргумента подпрограммы ( формального ) словом \verb|out|:'
    level: 11
    variants:
      - Изменения значения аргумента сохранится в переданной переменной!!
      - Изменения значения аргумента не сохранится в переданной переменной
      - Нельзя в качестве такого аргумента использовать не-переменные!!
      - В качестве такого аргумента можно использовать не-переменные
      - Этот аргумент можно использовать для вычислений внутри подпрограммы

    - question: 'Что означет добавление аргумента подпрограммы ( формального ) словом \verb|const|:'
    level: 11
    variants:
      - Изменения значения аргумента сохранится в переданной переменной
      - Изменения значения аргумента не сохранится в переданной переменной!!
      - Нельзя в качестве такого аргумента использовать не-переменные
      - В качестве такого аргумента можно использовать не-переменные!!
      - Этот аргумент можно использовать для вычислений внутри подпрограммы!!

    - question: 'Что означет добавление аргумента подпрограммы ( формального ) словом \verb|var|:'
    level: 11
    variants:
      - Изменения значения аргумента сохранится в переданной переменной!!
      - Изменения значения аргумента не сохранится в переданной переменной
      - Нельзя в качестве такого аргумента использовать не-переменные!!
      - В качестве такого аргумента можно использовать не-переменные
      - Этот аргумент можно использовать для вычислений внутри подпрограммы!!

  - question: 'Отметьте корректные операции работы с функцией \verb|abs(x: Integer): Integer|.'
    level: 12
    variants:
      - 'WriteLn(abs 42)'
      - 'WriteLn(abs(42))!!'
      - 'ReadLn(abs(42))'
      - 'abs(42)!!'
      - 'WriteLn(abs[42])'

  - question: 'Отметьте корректные операции работы с процедурой \verb|abs(var x: Integer)|.'
    level: 12
    variants:
      - 'abs x'
      - 'WriteLn(abs(x))'
      - 'abs[x]'
      - 'abs(x)!!'
      - 'abs(42)'
